// Generated by CoffeeScript 1.6.3
(function() {
  var Deferred, Whirlr, defer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Deferred = (typeof $ !== "undefined" && $ !== null ? $.Deferred : void 0) || (require('simply-deferred')).Deferred;

  defer = function(f) {
    if (typeof requestAnimationFrame !== "undefined" && requestAnimationFrame !== null) {
      return requestAnimationFrame(f);
    } else {
      return setTimeout(f, 0);
    }
  };

  Whirlr = (function() {
    function Whirlr() {
      this._next = __bind(this._next, this);
      this.queues = [];
      this._lock = Deferred().resolve();
    }

    Whirlr.prototype.sort = function(f) {
      return this.queues.sort(f);
    };

    Whirlr.prototype.stopped = function() {
      return this._lock.state() !== 'resolved';
    };

    Whirlr.prototype.stop = function() {
      return this.unshift(function(d) {});
    };

    Whirlr.prototype.resume = function() {
      var _this = this;
      return defer(function() {
        return _this._lock.resolve();
      });
    };

    Whirlr.prototype._next = function() {
      var func;
      if (func = this.queues.shift()) {
        if (func.length > 0) {
          this._lock = Deferred().done(this._next);
          return func(this._lock);
        } else {
          this._lock = func();
          return this._lock.done(this._next);
        }
      } else {
        return this.resume();
      }
    };

    Whirlr.prototype._startIfReady = function() {
      if (!this.stopped()) {
        this._lock = Deferred();
        return defer(this._next);
      }
    };

    Whirlr.prototype.unshift = function(func) {
      this.queues.unshift(func);
      return this._startIfReady();
    };

    Whirlr.prototype.add = function(func) {
      this.queues.push(func);
      return this._startIfReady();
    };

    return Whirlr;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = Whirlr;
  } else {
    window.Whirlr = Whirlr;
  }

}).call(this);
