// Generated by CoffeeScript 1.6.3
(function() {
  var Deferred, DeferredRunner,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Deferred = (typeof $ !== "undefined" && $ !== null ? $.Deferred : void 0) || (require('simply-deferred')).Deferred;

  DeferredRunner = (function() {
    function DeferredRunner() {
      this._next = __bind(this._next, this);
      this.queues = [];
      this._lock = Deferred().resolve();
    }

    DeferredRunner.prototype.sort = function(f) {
      return this.queues.sort(f);
    };

    DeferredRunner.prototype.locked = function() {
      return this._lock.state() !== 'resolved';
    };

    DeferredRunner.prototype.lock = function() {
      return this.prependQueue(function(d) {});
    };

    DeferredRunner.prototype.unlock = function() {
      return this._lock.resolve();
    };

    DeferredRunner.prototype._next = function() {
      var deferred_func;
      if (deferred_func = this.queues.shift()) {
        deferred_func(this._lock);
        return this._lock.done(this._next);
      } else {
        return this._lock.resolve();
      }
    };

    DeferredRunner.prototype._startIfReady = function() {
      var _this = this;
      if (!this.locked()) {
        this._lock = Deferred();
        return setTimeout(function() {
          return _this._next();
        }, 0);
      }
    };

    DeferredRunner.prototype.prependQueue = function(deferred_func) {
      this.queues.unshift(deferred_func);
      return this._startIfReady();
    };

    DeferredRunner.prototype.addQueue = function(deferred_func) {
      this.queues.push(deferred_func);
      return this._startIfReady();
    };

    return DeferredRunner;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = DeferredRunner;
  } else {
    window.DeferredRunner = DeferredRunner;
  }

}).call(this);
